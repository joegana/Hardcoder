import org.gradle.internal.os.OperatingSystem

apply plugin: 'com.android.library'
//apply from: rootProject.file('gradle/WeChatPublish.gradle')
//apply from: rootProject.file('gradle/WeChatNativeDepend.gradle')

version rootProject.ext.VERSION_NAME
group rootProject.ext.GROUP
//artifactId = 'app2sys'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28

        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                targets 'hardcoder', 'server'
                abiFilters 'arm64-v8a', 'armeabi-v7a'
                arguments '-DANDROID_STL=c++_shared'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            jniDebuggable true
        }
    }

    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

def generateProtoSources() {
    def protoFiles = fileTree(dir: 'src/main/proto', include: '*.proto')
    def archDir
    def os = OperatingSystem.current()
    if (os.isLinux()) {
        switch (os.arch) {
            case "i386":
            case "x86":
                archDir = "linux-x86"; break
            default:
                archDir = "linux-amd64"; break
        }
    } else {
        archDir = os.nativePrefix
    }

    def exePath = "${projectDir}/prebuilt/protoc/${archDir}/protoc${os.executableSuffix}"
    def outputDir = file("${buildDir}/generated/source/proto/cpp")
    outputDir.mkdirs()

    def cmdProc = ("${exePath} --cpp_out=${outputDir} " +
            "${protoFiles.collect({it.name}).join(' ')}").execute(null, file('src/main/proto'))
    cmdProc.waitForProcessOutput(System.out, System.err)
    if (cmdProc.exitValue() != 0) {
        throw new GradleException()
    }
}

afterEvaluate {
    def protoFiles = fileTree('src/main/proto') { include '*.proto' }
    def prebuildTask = project.tasks.findByName('preBuild')

    def generatorTask = project.task('generateProto') {
        inputs.files(protoFiles)
    }.configure {
        // Manually trigger sync procedure should always cause regenerating.
        if (project.hasProperty('android.injected.build.model.only')) {
            generateProtoSources()
        }
    }.doLast {
        generateProtoSources()
    }

    prebuildTask.dependsOn generatorTask
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

//apply plugin: 'com.jfrog.bintray'
//
//wechatPublish {
//    publishAllVariants true
//
//    publishToBintray {
//        userOrg = 'wemobiledev'
//        repo = 'maven'
//        name = 'com.tencent.mm.hardcoder:app2sys'
//        desc = ''
//        websiteUrl = 'https://github.com/Tencent/Hardcoder'
//        issueTrackerUrl = 'https://github.com/Tencent/Hardcoder/issues'
//        vcsUrl = 'https://github.com/Tencent/Hardcoder.git'
//        licenses = ['BSD 3-Clause']
//    }
//}